generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["aigaea"]
}

model ProxyClient {
  id                String    @id @default(uuid()) @db.Uuid
  state             Boolean   @db.Boolean
  is_wallet_created Boolean?
  is_verified       Boolean?
  email             String?
  expires           DateTime?
  browser_id        String    @db.VarChar(256)
  gaea_token        String    @db.VarChar(512)
  proxy_list        String?   @db.Text
  beget_password    String
  aigaea_password   String
  proxy_count       Int       @db.Integer
  instance          Int?

  ref_link         String?
  created          DateTime?          @default(now()) @db.Timestamptz(6)
  modified         DateTime?          @db.Timestamptz(6)
  ClientsToProxies ClientsToProxies[]

  @@index([state])
  @@index([email])
  @@index([browser_id])
  @@index([gaea_token])
  @@index([expires])
  @@index([proxy_count])
  @@map("proxy_client")
  @@schema("aigaea")
}

model Proxy {
  id String @id @unique

  created          DateTime?          @default(now()) @db.Timestamptz(6)
  modified         DateTime?          @db.Timestamptz(6)
  ClientsToProxies ClientsToProxies[]

  @@index([id])
  @@map("proxies")
  @@schema("aigaea")
}

model ClientsToProxies {
  proxy_id  String
  client_id String @db.Uuid

  proxy  Proxy       @relation(references: [id], fields: [proxy_id], onDelete: Cascade)
  client ProxyClient @relation(references: [id], fields: [client_id], onDelete: Cascade)

  @@unique([client_id, proxy_id])
  @@index([proxy_id])
  @@index([client_id])
  @@map("clients_to_proxies")
  @@schema("aigaea")
}
